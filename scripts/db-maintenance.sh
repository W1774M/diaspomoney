#!/bin/bash

# Script de maintenance et monitoring de la base de donn√©es DiaspoMoney
# Usage: ./scripts/db-maintenance.sh [options]

set -e  # Arr√™ter en cas d'erreur

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
DB_NAME="diaspomoney"
CONTAINER_NAME="mongodb"
LOG_FILE="$PROJECT_DIR/logs/db-maintenance.log"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fonctions utilitaires
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [INFO] $1" >> "$LOG_FILE"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [SUCCESS] $1" >> "$LOG_FILE"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [WARNING] $1" >> "$LOG_FILE"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [ERROR] $1" >> "$LOG_FILE"
}

log_debug() {
    echo -e "${CYAN}[DEBUG]${NC} $1"
    if [ "$VERBOSE" = true ]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') [DEBUG] $1" >> "$LOG_FILE"
    fi
}

# Fonction d'aide
show_help() {
    echo "Script de maintenance et monitoring de la base de donn√©es DiaspoMoney"
    echo ""
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  -h, --help              Afficher cette aide"
    echo "  -s, --status            Afficher le statut de la base de donn√©es"
    echo "  -m, --monitor           Monitoring en temps r√©el"
    echo "  -o, --optimize          Optimiser la base de donn√©es"
    echo "  -c, --cleanup           Nettoyer les donn√©es obsol√®tes"
    echo "  -r, --repair            R√©parer la base de donn√©es"
    echo "  -i, --info              Informations d√©taill√©es sur la base"
    echo "  -v, --verbose           Mode verbeux"
    echo "  --health-check          V√©rification de sant√© compl√®te"
    echo "  --performance           Analyse des performances"
    echo ""
    echo "Exemples:"
    echo "  $0 -s                   # Statut de la base"
    echo "  $0 -m                   # Monitoring en temps r√©el"
    echo "  $0 -o                   # Optimisation"
    echo "  $0 --health-check       # V√©rification de sant√©"
    echo "  $0 --performance        # Analyse des performances"
    echo ""
}

# Variables par d√©faut
VERBOSE=false
ACTION=""

# Parsing des arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -s|--status)
            ACTION="status"
            shift
            ;;
        -m|--monitor)
            ACTION="monitor"
            shift
            ;;
        -o|--optimize)
            ACTION="optimize"
            shift
            ;;
        -c|--cleanup)
            ACTION="cleanup"
            shift
            ;;
        -r|--repair)
            ACTION="repair"
            shift
            ;;
        -i|--info)
            ACTION="info"
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        --health-check)
            ACTION="health"
            shift
            ;;
        --performance)
            ACTION="performance"
            shift
            ;;
        *)
            log_error "Option inconnue: $1"
            show_help
            exit 1
            ;;
    esac
done

# Cr√©er le r√©pertoire de logs
mkdir -p "$(dirname "$LOG_FILE")"

# V√©rifications pr√©liminaires
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."
    
    # V√©rifier si Docker est install√©
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√© ou n'est pas dans le PATH"
        exit 1
    fi
    
    # V√©rifier si le conteneur MongoDB est en cours d'ex√©cution
    if ! docker ps | grep -q "$CONTAINER_NAME"; then
        log_error "Le conteneur MongoDB '$CONTAINER_NAME' n'est pas en cours d'ex√©cution"
        exit 1
    fi
    
    log_success "Pr√©requis v√©rifi√©s"
}

# Fonction de statut
show_status() {
    log_info "=== Statut de la base de donn√©es ==="
    
    # Statut du conteneur
    log_info "Statut du conteneur MongoDB:"
    docker ps --filter "name=$CONTAINER_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    
    # Connexion √† la base
    log_info "Test de connexion √† la base de donn√©es:"
    if docker exec "$CONTAINER_NAME" mongosh --quiet --eval "db.adminCommand('ping')" | grep -q "1"; then
        log_success "Connexion MongoDB OK"
    else
        log_error "Connexion MongoDB √©chou√©e"
        return 1
    fi
    
    # Informations sur la base
    log_info "Informations sur la base '$DB_NAME':"
    docker exec "$CONTAINER_NAME" mongosh --quiet --eval "
        use $DB_NAME;
        print('Base de donn√©es: ' + db.getName());
        print('Collections: ' + db.getCollectionNames().length);
        print('Taille totale: ' + (db.stats().dataSize / 1024 / 1024).toFixed(2) + ' MB');
    "
}

# Fonction de monitoring
monitor_database() {
    log_info "=== Monitoring en temps r√©el ==="
    log_info "Appuyez sur Ctrl+C pour arr√™ter"
    
    trap 'log_info "Monitoring arr√™t√©"; exit 0' INT
    
    while true; do
        clear
        echo "=== Monitoring MongoDB - $(date) ==="
        echo ""
        
        # Statut du conteneur
        echo "üì¶ Conteneur:"
        docker ps --filter "name=$CONTAINER_NAME" --format "  {{.Names}}: {{.Status}}"
        echo ""
        
        # Statistiques de la base
        echo "üóÑÔ∏è  Base de donn√©es '$DB_NAME':"
        docker exec "$CONTAINER_NAME" mongosh --quiet --eval "
            use $DB_NAME;
            const stats = db.stats();
            print('  Collections: ' + stats.collections);
            print('  Documents: ' + stats.objects);
            print('  Taille des donn√©es: ' + (stats.dataSize / 1024 / 1024).toFixed(2) + ' MB');
            print('  Taille de stockage: ' + (stats.storageSize / 1024 / 1024).toFixed(2) + ' MB');
            print('  Index: ' + stats.indexes);
            print('  Taille des index: ' + (stats.indexSize / 1024 / 1024).toFixed(2) + ' MB');
        " | sed 's/^/  /'
        
        echo ""
        echo "‚è±Ô∏è  Mise √† jour dans 5 secondes..."
        sleep 5
    done
}

# Fonction d'optimisation
optimize_database() {
    log_info "=== Optimisation de la base de donn√©es ==="
    
    # V√©rifier l'espace disque
    log_info "V√©rification de l'espace disque:"
    docker exec "$CONTAINER_NAME" df -h /data/db
    
    # Compacter les collections
    log_info "Compactage des collections..."
    docker exec "$CONTAINER_NAME" mongosh --quiet --eval "
        use $DB_NAME;
        const collections = db.getCollectionNames();
        collections.forEach(function(collName) {
            print('Compactage de: ' + collName);
            try {
                db.runCommand({compact: collName});
                print('  ‚úì Compactage r√©ussi');
            } catch(e) {
                print('  ‚úó Erreur: ' + e.message);
            }
        });
    "
    
    # Mise √† jour des statistiques
    log_info "Mise √† jour des statistiques..."
    docker exec "$CONTAINER_NAME" mongosh --quiet --eval "
        use $DB_NAME;
        db.runCommand({dbStats: 1, scale: 1024*1024});
    "
    
    log_success "Optimisation termin√©e"
}

# Fonction de nettoyage
cleanup_database() {
    log_info "=== Nettoyage de la base de donn√©es ==="
    
    # Supprimer les documents obsol√®tes (exemple: plus de 1 an)
    log_info "Suppression des documents obsol√®tes..."
    
    # Supprimer les tokens expir√©s
    docker exec "$CONTAINER_NAME" mongosh --quiet --eval "
        use $DB_NAME;
        
        // Supprimer les tokens de v√©rification expir√©s
        const expiredTokens = db.emailverificationtokens.deleteMany({
            expiresAt: {\$lt: new Date()}
        });
        print('Tokens de v√©rification supprim√©s: ' + expiredTokens.deletedCount);
        
        // Supprimer les tokens de reset expir√©s
        const expiredResetTokens = db.passwordresettokens.deleteMany({
            expiresAt: {\$lt: new Date()}
        });
        print('Tokens de reset supprim√©s: ' + expiredResetTokens.deletedCount);
        
        // Supprimer les tokens de retry expir√©s
        const expiredRetryTokens = db.retrytokens.deleteMany({
            expiresAt: {\$lt: new Date()}
        });
        print('Tokens de retry supprim√©s: ' + expiredRetryTokens.deletedCount);
    "
    
    log_success "Nettoyage termin√©"
}

# Fonction de r√©paration
repair_database() {
    log_info "=== R√©paration de la base de donn√©es ==="
    
    # V√©rifier l'int√©grit√©
    log_info "V√©rification de l'int√©grit√©..."
    docker exec "$CONTAINER_NAME" mongosh --quiet --eval "
        use $DB_NAME;
        const result = db.runCommand({dbHash: 1});
        print('Hash de la base: ' + result.md5);
    "
    
    # R√©parer les collections
    log_info "R√©paration des collections..."
    docker exec "$CONTAINER_NAME" mongosh --quiet --eval "
        use $DB_NAME;
        const collections = db.getCollectionNames();
        collections.forEach(function(collName) {
            print('R√©paration de: ' + collName);
            try {
                db.runCommand({repairDatabase: 1});
                print('  ‚úì R√©paration r√©ussie');
            } catch(e) {
                print('  ‚úó Erreur: ' + e.message);
            }
        });
    "
    
    log_success "R√©paration termin√©e"
}

# Fonction d'informations d√©taill√©es
show_detailed_info() {
    log_info "=== Informations d√©taill√©es ==="
    
    # Informations syst√®me
    log_info "Informations syst√®me MongoDB:"
    docker exec "$CONTAINER_NAME" mongosh --quiet --eval "
        const buildInfo = db.runCommand({buildInfo: 1});
        print('Version: ' + buildInfo.version);
        print('Architecture: ' + buildInfo.bits + ' bits');
        print('OS: ' + buildInfo.os);
        print('JavaScript Engine: ' + buildInfo.jsEngine);
    " | sed 's/^/  /'
    
    # Statistiques d√©taill√©es
    log_info "Statistiques d√©taill√©es de la base '$DB_NAME':"
    docker exec "$CONTAINER_NAME" mongosh --quiet --eval "
        use $DB_NAME;
        const stats = db.stats();
        print('Collections: ' + stats.collections);
        print('Vues: ' + stats.views);
        print('Documents: ' + stats.objects);
        print('Taille des donn√©es: ' + (stats.dataSize / 1024 / 1024).toFixed(2) + ' MB');
        print('Taille de stockage: ' + (stats.storageSize / 1024 / 1024).toFixed(2) + ' MB');
        print('Index: ' + stats.indexes);
        print('Taille des index: ' + (stats.indexSize / 1024 / 1024).toFixed(2) + ' MB');
        print('Taille moyenne des documents: ' + (stats.avgObjSize / 1024).toFixed(2) + ' KB');
    " | sed 's/^/  /'
    
    # Collections et leurs tailles
    log_info "D√©tail des collections:"
    docker exec "$CONTAINER_NAME" mongosh --quiet --eval "
        use $DB_NAME;
        const collections = db.getCollectionNames();
        collections.forEach(function(collName) {
            const collStats = db.getCollection(collName).stats();
            print(collName + ':');
            print('  Documents: ' + collStats.count);
            print('  Taille: ' + (collStats.size / 1024 / 1024).toFixed(2) + ' MB');
            print('  Stockage: ' + (collStats.storageSize / 1024 / 1024).toFixed(2) + ' MB');
            print('  Index: ' + collStats.nindexes);
        });
    " | sed 's/^/  /'
}

# Fonction de v√©rification de sant√©
health_check() {
    log_info "=== V√©rification de sant√© compl√®te ==="
    
    local health_score=0
    local total_checks=0
    
    # V√©rification 1: Connexion
    log_info "1. Test de connexion..."
    if docker exec "$CONTAINER_NAME" mongosh --quiet --eval "db.adminCommand('ping')" | grep -q "1"; then
        log_success "‚úì Connexion OK"
        ((health_score++))
    else
        log_error "‚úó Connexion √©chou√©e"
    fi
    ((total_checks++))
    
    # V√©rification 2: Espace disque
    log_info "2. V√©rification de l'espace disque..."
    local disk_usage=$(docker exec "$CONTAINER_NAME" df /data/db | tail -1 | awk '{print $5}' | sed 's/%//')
    if [ "$disk_usage" -lt 80 ]; then
        log_success "‚úì Espace disque OK ($disk_usage%)"
        ((health_score++))
    else
        log_warning "‚ö† Espace disque critique ($disk_usage%)"
    fi
    ((total_checks++))
    
    # V√©rification 3: Performance des requ√™tes
    log_info "3. Test de performance..."
    local query_time=$(docker exec "$CONTAINER_NAME" mongosh --quiet --eval "
        use $DB_NAME;
        const start = Date.now();
        db.users.findOne();
        const end = Date.now();
        print(end - start);
    ")
    if [ "$query_time" -lt 100 ]; then
        log_success "‚úì Performance OK (${query_time}ms)"
        ((health_score++))
    else
        log_warning "‚ö† Performance lente (${query_time}ms)"
    fi
    ((total_checks++))
    
    # V√©rification 4: Int√©grit√© des donn√©es
    log_info "4. V√©rification de l'int√©grit√©..."
    if docker exec "$CONTAINER_NAME" mongosh --quiet --eval "use $DB_NAME; db.runCommand({dbHash: 1})" > /dev/null 2>&1; then
        log_success "‚úì Int√©grit√© OK"
        ((health_score++))
    else
        log_error "‚úó Probl√®me d'int√©grit√© d√©tect√©"
    fi
    ((total_checks++))
    
    # Score final
    local percentage=$((health_score * 100 / total_checks))
    echo ""
    log_info "Score de sant√©: $health_score/$total_checks ($percentage%)"
    
    if [ "$percentage" -ge 80 ]; then
        log_success "√âtat de sant√©: EXCELLENT"
    elif [ "$percentage" -ge 60 ]; then
        log_warning "√âtat de sant√©: BON"
    elif [ "$percentage" -ge 40 ]; then
        log_warning "√âtat de sant√©: MOYEN"
    else
        log_error "√âtat de sant√©: CRITIQUE"
    fi
}

# Fonction d'analyse des performances
analyze_performance() {
    log_info "=== Analyse des performances ==="
    
    # Statistiques des op√©rations
    log_info "Statistiques des op√©rations:"
    docker exec "$CONTAINER_NAME" mongosh --quiet --eval "
        const stats = db.adminCommand({serverStatus: 1});
        print('Op√©rations par seconde:');
        print('  Inserts: ' + stats.opcounters.insert);
        print('  Queries: ' + stats.opcounters.query);
        print('  Updates: ' + stats.opcounters.update);
        print('  Deletes: ' + stats.opcounters.delete);
        print('  GetMores: ' + stats.opcounters.getmore);
        print('');
        print('Connexions:');
        print('  Actives: ' + stats.connections.active);
        print('  Disponibles: ' + stats.connections.available);
        print('  En cours: ' + stats.connections.current);
    " | sed 's/^/  /'
    
    # Index utilis√©s
    log_info "Analyse des index:"
    docker exec "$CONTAINER_NAME" mongosh --quiet --eval "
        use $DB_NAME;
        const collections = db.getCollectionNames();
        collections.forEach(function(collName) {
            const collStats = db.getCollection(collName).stats();
            if (collStats.nindexes > 1) {
                print(collName + ':');
                const indexes = db.getCollection(collName).getIndexes();
                indexes.forEach(function(idx) {
                    print('  - ' + idx.name + ' (' + Object.keys(idx.key).join(', ') + ')');
                });
            }
        });
    " | sed 's/^/  /'
    
    # Recommandations
    log_info "Recommandations d'optimisation:"
    echo "  - V√©rifiez que les index correspondent aux requ√™tes fr√©quentes"
    echo "  - Surveillez la taille des collections et des index"
    echo "  - Utilisez la projection pour limiter les donn√©es retourn√©es"
    echo "  - Consid√©rez la pagination pour les grandes collections"
}

# Fonction principale
main() {
    log_info "=== Script de Maintenance DiaspoMoney ==="
    log_info "Date: $(date)"
    
    check_prerequisites
    
    case $ACTION in
        "status")
            show_status
            ;;
        "monitor")
            monitor_database
            ;;
        "optimize")
            optimize_database
            ;;
        "cleanup")
            cleanup_database
            ;;
        "repair")
            repair_database
            ;;
        "info")
            show_detailed_info
            ;;
        "health")
            health_check
            ;;
        "performance")
            analyze_performance
            ;;
        "")
            log_error "Aucune action sp√©cifi√©e"
            show_help
            exit 1
            ;;
        *)
            log_error "Action inconnue: $ACTION"
            exit 1
            ;;
    esac
    
    log_success "=== Op√©ration termin√©e ==="
}

# Ex√©cution du script
main "$@"
