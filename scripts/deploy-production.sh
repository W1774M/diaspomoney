#!/bin/bash

# üöÄ Script de d√©ploiement en production pour Diaspomoney
# Usage: ./scripts/deploy-production.sh [environment]

set -e

# Configuration
ENVIRONMENT=${1:-production}
PROJECT_NAME="diaspomoney"
DOCKER_COMPOSE_FILES="-f docker/docker-compose.yml -f docker/docker-compose.prod.yml"

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rification des pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."
    
    # V√©rifier Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier le fichier .env
    if [ ! -f ".env" ]; then
        log_error "Fichier .env manquant"
        exit 1
    fi
    
    # V√©rifier les permissions
    if [ ! -w "docker/traefik/letsencrypt" ]; then
        log_warning "Cr√©ation du r√©pertoire letsencrypt..."
        mkdir -p docker/traefik/letsencrypt
        chmod 755 docker/traefik/letsencrypt
    fi
    
    log_success "Pr√©requis v√©rifi√©s"
}

# Cr√©ation des volumes et r√©pertoires
setup_directories() {
    log_info "Configuration des r√©pertoires..."
    
    # Cr√©er les r√©pertoires n√©cessaires
    mkdir -p docker/traefik/letsencrypt
    mkdir -p docker/traefik/traefik_logs
    
    # Permissions pour ACME
    chmod 755 docker/traefik/letsencrypt
    chmod 755 docker/traefik/traefik_logs
    
    # Cr√©er le fichier acme.json s'il n'existe pas
    if [ ! -f "docker/traefik/letsencrypt/acme.json" ]; then
        touch docker/traefik/letsencrypt/acme.json
        chmod 600 docker/traefik/letsencrypt/acme.json
        log_success "Fichier acme.json cr√©√©"
    fi
    
    log_success "R√©pertoires configur√©s"
}

# Construction des images
build_images() {
    log_info "Construction des images Docker..."
    
    # Construire l'image de l'application
    docker-compose $DOCKER_COMPOSE_FILES build app
    
    log_success "Images construites"
}

# D√©ploiement des services
deploy_services() {
    log_info "D√©ploiement des services..."
    
    # Arr√™ter les services existants
    log_info "Arr√™t des services existants..."
    docker-compose $DOCKER_COMPOSE_FILES down --remove-orphans
    
    # D√©marrer les services
    log_info "D√©marrage des services..."
    docker-compose $DOCKER_COMPOSE_FILES up -d
    
    log_success "Services d√©ploy√©s"
}

# V√©rification de la sant√© des services
health_check() {
    log_info "V√©rification de la sant√© des services..."
    
    # Attendre que les services d√©marrent
    sleep 10
    
    # V√©rifier les conteneurs
    if ! docker-compose $DOCKER_COMPOSE_FILES ps | grep -q "Up"; then
        log_error "Certains services ne sont pas d√©marr√©s"
        docker-compose $DOCKER_COMPOSE_FILES ps
        exit 1
    fi
    
    # V√©rifier MongoDB
    log_info "V√©rification de MongoDB..."
    if ! docker-compose $DOCKER_COMPOSE_FILES exec -T mongodb mongosh --eval "db.adminCommand('ping')" &> /dev/null; then
        log_warning "MongoDB n'est pas encore pr√™t, attente..."
        sleep 30
    fi
    
    # V√©rifier l'application
    log_info "V√©rification de l'application..."
    if ! docker-compose $DOCKER_COMPOSE_FILES exec -T app curl -f http://localhost:3000 &> /dev/null; then
        log_warning "L'application n'est pas encore pr√™te"
    fi
    
    log_success "V√©rification de sant√© termin√©e"
}

# Affichage des informations de d√©ploiement
show_deployment_info() {
    log_info "Informations de d√©ploiement:"
    
    echo ""
    echo "üåê Services accessibles:"
    echo "  ‚Ä¢ Application: https://app.diaspomoney.fr"
    echo "  ‚Ä¢ Dashboard: https://dashboard.diaspomoney.fr"
    echo "  ‚Ä¢ MongoDB: https://mongo.diaspomoney.fr"
    echo ""
    
    echo "üìä Monitoring:"
    echo "  ‚Ä¢ Grafana: https://dashboard.diaspomoney.fr/grafana"
    echo "  ‚Ä¢ Prometheus: https://dashboard.diaspomoney.fr/prometheus"
    echo "  ‚Ä¢ Loki: https://dashboard.diaspomoney.fr/loki"
    echo ""
    
    echo "üîß Commandes utiles:"
    echo "  ‚Ä¢ Logs: docker-compose $DOCKER_COMPOSE_FILES logs -f"
    echo "  ‚Ä¢ Status: docker-compose $DOCKER_COMPOSE_FILES ps"
    echo "  ‚Ä¢ Restart: docker-compose $DOCKER_COMPOSE_FILES restart"
    echo ""
    
    echo "üìã Prochaines √©tapes:"
    echo "  1. V√©rifiez que vos domaines pointent vers cette IP"
    echo "  2. Attendez la g√©n√©ration des certificats SSL (1-2 minutes)"
    echo "  3. Testez l'acc√®s HTTPS aux services"
    echo ""
}

# Nettoyage en cas d'erreur
cleanup_on_error() {
    log_error "Erreur d√©tect√©e, nettoyage..."
    docker-compose $DOCKER_COMPOSE_FILES down --remove-orphans
    exit 1
}

# Fonction principale
main() {
    log_info "üöÄ D√©ploiement en production de $PROJECT_NAME"
    log_info "Environnement: $ENVIRONMENT"
    echo ""
    
    # Configuration du trap pour le nettoyage
    trap cleanup_on_error ERR
    
    # √âtapes de d√©ploiement
    check_prerequisites
    setup_directories
    build_images
    deploy_services
    health_check
    show_deployment_info
    
    log_success "üéâ D√©ploiement termin√© avec succ√®s!"
    log_info "Les certificats SSL seront g√©n√©r√©s automatiquement lors de la premi√®re requ√™te HTTPS"
}

# Ex√©cution du script
main "$@"
