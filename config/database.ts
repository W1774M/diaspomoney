import mongoose from "mongoose";

// Configuration de la base de donn√©es MongoDB
export const databaseConfig = {
  url:
    process.env["MONGODB_URI"] ||
    "mongodb://admin:admin123@localhost:27017/diaspomoney?authSource=admin",
  options: {
    maxPoolSize: 10,
    serverSelectionTimeoutMS: 5000,
    socketTimeoutMS: 45000,
    bufferCommands: false,
  },
};

// Fonction de connexion √† MongoDB
export const connectDatabase = async (): Promise<void> => {
  // Ne jamais ex√©cuter c√¥t√© client
  if (typeof window !== "undefined") {
    console.warn("‚ö†Ô∏è Tentative de connexion MongoDB c√¥t√© client ignor√©e");
    return;
  }

  try {
    await mongoose.connect(databaseConfig.url, databaseConfig.options);
    console.log("‚úÖ Connexion MongoDB √©tablie avec succ√®s");
  } catch (error) {
    console.error("‚ùå Erreur de connexion MongoDB:", error);
    process.exit(1);
  }
};

// Fonction de d√©connexion
export const disconnectDatabase = async (): Promise<void> => {
  // Ne jamais ex√©cuter c√¥t√© client
  if (typeof window !== "undefined") {
    return;
  }

  try {
    await mongoose.disconnect();
    console.log("‚úÖ D√©connexion MongoDB r√©ussie");
  } catch (error) {
    console.error("‚ùå Erreur de d√©connexion MongoDB:", error);
  }
};

// Initialisation des √©v√©nements MongoDB (c√¥t√© serveur uniquement)
const initializeMongoEvents = () => {
  if (typeof window !== "undefined") {
    return; // Ne jamais ex√©cuter c√¥t√© client
  }

  // Gestion des √©v√©nements de connexion
  mongoose.connection.on("connected", () => {
    console.log("üîó MongoDB connect√©");
  });

  mongoose.connection.on("error", err => {
    console.error("‚ùå Erreur MongoDB:", err);
  });

  mongoose.connection.on("disconnected", () => {
    console.log("üîå MongoDB d√©connect√©");
  });

  // Gestion propre de la fermeture
  process.on("SIGINT", async () => {
    await disconnectDatabase();
    process.exit(0);
  });
};

// Initialiser les √©v√©nements seulement c√¥t√© serveur
if (typeof window === "undefined") {
  initializeMongoEvents();
}
