name: DiaspoMoney Tests

on:
  pull_request:
    branches: [ main, develop, rct ]
  push:
    branches: [ main, develop, rct ]

env:
  NODE_ENV: test

jobs:
  # === TESTS ===
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run unit tests
      run: npm run test:unit
      env:
        MONGODB_URI: mongodb://localhost:27017/diaspomoney_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test

    - name: Run integration tests
      run: npm run test:integration
      env:
        MONGODB_URI: mongodb://localhost:27017/diaspomoney_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test

    - name: Run security tests
      run: npm run test:security
      env:
        MONGODB_URI: mongodb://localhost:27017/diaspomoney_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test

    - name: Run performance tests
      run: npm run test:performance
      env:
        MONGODB_URI: mongodb://localhost:27017/diaspomoney_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test

    - name: Run security audit
      run: npm audit --audit-level=high

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results/

  # === SECURITY SCAN ===
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        languages: javascript

  # === BUILD TEST ===
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_APP_URL: https://test.diaspomoney.fr
        NEXT_PUBLIC_API_URL: https://test.diaspomoney.fr/api

    - name: Test Docker build
      run: |
        docker build -f Dockerfile.prod -t diaspomoney-test:latest .
        docker run --rm diaspomoney-test:latest npm run test:unit
