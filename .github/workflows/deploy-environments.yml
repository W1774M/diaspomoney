name: DiaspoMoney Multi-Environment Deployment

on:
  push:
    branches: [ main, develop, rct ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - rct
        - prod

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # === TESTS ===
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run unit tests
      run: npm run test:unit
      env:
        MONGODB_URI: mongodb://localhost:27017/diaspomoney_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test

    - name: Run integration tests
      run: npm run test:integration
      env:
        MONGODB_URI: mongodb://localhost:27017/diaspomoney_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test

    - name: Run security audit
      run: npm audit --audit-level=high

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results/

  # === SECURITY SCAN ===
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        languages: javascript

  # === BUILD ===
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'

    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image
      id: image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  # === DÉPLOIEMENT DEV ===
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    environment:
      name: development
      url: https://dev.diaspomoney.fr

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm run test

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: development
        NEXT_PUBLIC_APP_URL: https://dev.diaspomoney.fr
        NEXT_PUBLIC_API_URL: https://dev.diaspomoney.fr/api

    - name: Build Docker image
      run: |
        docker build -f Dockerfile.prod -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-${{ github.sha }} .
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-latest

    - name: Push to registry
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-latest

    - name: Deploy to Kubernetes
      run: |
        echo "${{ secrets.KUBE_CONFIG_DEV }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Update image in deployment
        kubectl set image deployment/diaspomoney-app \
          diaspomoney-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-${{ github.sha }} \
          -n diaspomoney-dev
        
        # Wait for rollout
        kubectl rollout status deployment/diaspomoney-app -n diaspomoney-dev --timeout=300s

    - name: Run smoke tests
      run: |
        kubectl run smoke-test --image=curlimages/curl:latest --rm -i --restart=Never \
          -- curl -f https://dev.diaspomoney.fr/api/health

  # === DÉPLOIEMENT RCT ===
  deploy-rct:
    name: Deploy to Recette
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/rct' || github.event_name == 'workflow_dispatch'
    
    environment:
      name: recette
      url: https://rct.diaspomoney.fr

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm run test

    - name: Run integration tests
      run: npm run test:integration

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_APP_URL: https://rct.diaspomoney.fr
        NEXT_PUBLIC_API_URL: https://rct.diaspomoney.fr/api

    - name: Build Docker image
      run: |
        docker build -f Dockerfile.prod -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:rct-${{ github.sha }} .
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:rct-${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:rct-latest

    - name: Push to registry
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:rct-${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:rct-latest

    - name: Deploy to Kubernetes
      run: |
        echo "${{ secrets.KUBE_CONFIG_RCT }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Update image in deployment
        kubectl set image deployment/diaspomoney-app \
          diaspomoney-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:rct-${{ github.sha }} \
          -n diaspomoney-rct
        
        # Wait for rollout
        kubectl rollout status deployment/diaspomoney-app -n diaspomoney-rct --timeout=300s

    - name: Run smoke tests
      run: |
        kubectl run smoke-test --image=curlimages/curl:latest --rm -i --restart=Never \
          -- curl -f https://rct.diaspomoney.fr/api/health

  # === DÉPLOIEMENT PROD ===
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    
    environment:
      name: production
      url: https://app.diaspomoney.fr

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run full test suite
      run: |
        npm run test
        npm run test:integration
        npm run test:security
        npm run test:performance

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_APP_URL: https://app.diaspomoney.fr
        NEXT_PUBLIC_API_URL: https://app.diaspomoney.fr/api

    - name: Build Docker image
      run: |
        docker build -f Dockerfile.prod -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-${{ github.sha }} .
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-latest

    - name: Push to registry
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-latest

    - name: Deploy to Kubernetes
      run: |
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Update image in deployment
        kubectl set image deployment/diaspomoney-app \
          diaspomoney-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-${{ github.sha }} \
          -n diaspomoney-prod
        
        # Wait for rollout
        kubectl rollout status deployment/diaspomoney-app -n diaspomoney-prod --timeout=600s

    - name: Run smoke tests
      run: |
        kubectl run smoke-test --image=curlimages/curl:latest --rm -i --restart=Never \
          -- curl -f https://app.diaspomoney.fr/api/health

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  # === ROLLBACK ===
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/rct')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
          export NAMESPACE=diaspomoney-prod
        elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
          echo "${{ secrets.KUBE_CONFIG_DEV }}" | base64 -d > kubeconfig
          export NAMESPACE=diaspomoney-dev
        elif [ "${{ github.ref }}" == "refs/heads/rct" ]; then
          echo "${{ secrets.KUBE_CONFIG_RCT }}" | base64 -d > kubeconfig
          export NAMESPACE=diaspomoney-rct
        fi
        export KUBECONFIG=kubeconfig

    - name: Rollback deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl rollout undo deployment/diaspomoney-app -n $NAMESPACE
        kubectl rollout status deployment/diaspomoney-app -n $NAMESPACE --timeout=300s

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
