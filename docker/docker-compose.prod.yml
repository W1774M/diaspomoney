include:
  - compose.monitoring.yaml

networks:
  traefik:
    external: true         # réseau partagé pour l'edge
  diaspomoney:
    driver: bridge         # réseau interne app <-> mongodb

volumes:
  traefik_letsencrypt: {}
  traefik_logs: {}
  mongodb_data: {}

services:
  traefik:
    image: traefik:v3.1
    container_name: traefik
    restart: unless-stopped
    networks:
      - traefik
      - diaspomoney
    ports:
      - "80:80"
      - "443:443"
    command:
      - --configFile=/traefik/traefik.yml
      - --certificatesresolvers.le.acme.email=${LETSENCRYPT_EMAIL}  
    environment:
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
    volumes:
      - ./traefik.yml:/traefik/traefik.yml:ro
      - ./letsencrypt:/letsencrypt
      - ./traefik_logs:/var/log/traefik
      - /var/run/docker.sock:/var/run/docker.sock:ro
    secrets:
      - traefik_basicauth
    labels:
      - traefik.enable=true
        # Router vers le dashboard Traefik (api@internal)
      - traefik.http.routers.traefik-dashboard.rule=Host(`dashboard.diaspomoney.fr`)
      - traefik.http.routers.traefik-dashboard.entrypoints=websecure
      - traefik.http.routers.traefik-dashboard.tls=true
      - traefik.http.routers.traefik-dashboard.tls.certresolver=le
      - traefik.http.routers.traefik-dashboard.service=api@internal
        # Middlewares: IP whitelist puis BasicAuth
      - traefik.http.middlewares.dash-allow.ipallowlist.sourcerange=217.154.22.202/32
      - traefik.http.middlewares.dash-allow.ipallowlist.ipstrategy.depth=1
      - traefik.http.middlewares.dash-auth.basicauth.usersfile=/run/secrets/traefik_basicauth
      - traefik.http.routers.traefik-dashboard.middlewares=dash-allow,dash-auth

  app:
    build:
      context: ../
      dockerfile: Dockerfile
    container_name: app
    restart: unless-stopped
    env_file:
      - ../.env
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - traefik
      - diaspomoney
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000/ || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "512M"
    expose:
      - "3000"
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik
      - traefik.http.routers.app.rule=Host(`app.diaspomoney.fr`)
      - traefik.http.routers.app.entrypoints=websecure
      - traefik.http.routers.app.tls=true
      - traefik.http.routers.app.tls.certresolver=le
      - traefik.http.services.app.loadbalancer.server.port=3000
      # Sécurité (HSTS); à activer quand le cert est OK
      # - traefik.http.middlewares.sec.headers.stsSeconds=31536000
      # - traefik.http.middlewares.sec.headers.stsIncludeSubdomains=true
      # - traefik.http.middlewares.sec.headers.stsPreload=true
      # - traefik.http.routers.app.middlewares=sec@docker

  mongodb:
    image: mongo:7.0
    container_name: mongodb
    restart: unless-stopped
    env_file:
      - ../.env
    volumes:
      - mongodb_data:/data/db
      # - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro  # si tu as un init script
    networks:
      - diaspomoney
    healthcheck:
      test: ["CMD-SHELL", "mongosh --username $$MONGO_INITDB_ROOT_USERNAME --password $$MONGO_INITDB_ROOT_PASSWORD --eval 'db.adminCommand({ ping: 1 })' --authenticationDatabase admin --quiet || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12

secrets:
  traefik_basicauth:
    file: ./secrets/traefik.htpasswd

